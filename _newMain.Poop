
import Foundation
import SwiftSerial

#if os(Linux)
import Glibc
#else
import Darwin.C
#endif
import Foundation

print("You should do a loopback i.e short the TX and RX pins of the target serial port before testing.")

let testBinaryArray : Character = "x"
//let testBinaryArray : [UInt8] = [1,2,3]
//let testBinaryArray : [UInt8] = [0x11, 0x22, 0x33, 0x0D, 0x44]

let arguments = CommandLine.arguments
//guard arguments.count >= 2 else {
//    print("Need serial port name, e.g. /dev/ttyUSB0 or /dev/cu.usbserial as the first argument.")
//    exit(1)
//}

let portName = "/dev/ttyAMA0"
let serialPort: SerialPort = SerialPort(path: portName)



//print("PWM from GPIO18 with 500ns period and 50% duty cycle")
//100
//pwm.startPWM(period: period, duty: 0)
//        let throttle = Float(input ?? "0.0") ?? 0.0
//        pwm.startPWM(period: period, duty: throttle)
//        print(throttle)


//RADIO

do {
    print("Ready...")
    print("Attempting to open port: \(portName)")
    try serialPort.openPort()
    print("Serial port \(portName) opened successfully.")
    defer {
        serialPort.closePort()
        print("Port is Closed")
    }
    
    serialPort.setSettings(receiveRate: .baud1200,
                           transmitRate: .baud1200,
                           minimumBytesToRead: 1)
    
    
//    print("Sending: ", terminator:"")
//    print(testBinaryArray.map { Int($0, radix: 16, uppercase: false) })
    
//    let dataToSend: Data = testBinaryArray.data(using: .ascii)!

    //    let dataToSend: Data = Data(_: testBinaryArray)
    //    let dataToSend: Data = Data(_: testBinaryArray)
        let dataToSend = UnicodeScalar("x")
    let bytesWritten = try serialPort.writeChar(UnicodeScalar("x"))
    
    print("Successfully wrote \(bytesWritten) bytes")
    
    
    
    let tRead = Thread(){
        while true {
            do {
                let dataReceived = try serialPort.readChar()
                
//                print("Received: ", terminator:"")
//                print(dataReceived.map { String($0, radix: 16, uppercase: false) })
                
                if(dataToSend == dataReceived){
                    print("Successful!!@!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
                } else {
                    print(":::Uh oh!::::", dataReceived)
//                    print(":::Uh oh!::::", dataReceived.map { String($0, radix: 16, uppercase: false) })
                }
                //        sleep(5)
                
            } catch {
                print("noRead!")
            }
        }
    }
    tRead.start()
    
    let tWrite = Thread(){
        while true {
            do {
                let _ = try serialPort.writeChar(dataToSend)
                sleep(1)
                
            } catch {
                print("noWrite!")
            }
        }
    }
    tWrite.start()
    
    var exit = false
    
    while(!exit){
        
        print("Send: ", terminator:" ")
        let input = readLine(strippingNewline: true)
        exit = (input=="x") ? true : false
        
        if !exit {
//            uart.writeString(input!)
        } else {
            
        }
    }
    
} catch PortError.failedToOpen {
    print("Serial port \(portName) failed to open. You might need root permissions.")
} catch {
    print("Error: \(error)")
}
